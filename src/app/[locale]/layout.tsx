import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "../globals.css";
import { Footer, Navbar, ParticlesBackground, Providers } from "@/components";
import { Toaster } from "react-hot-toast";
import { getMessages, getTranslations } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import { NextIntlClientProvider } from "next-intl";
import { ScrollToTopButton } from '../../components/scroll-to-top-Â´button/ScrollToTopButton';

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
});


export const locales = ["es", "en", "de"];

export async function generateMetadata({params,}: {params: { locale: string };}): Promise<Metadata> {

  const locale = params.locale;
  const t = await getTranslations("Metadata");

  return {

    metadataBase: new URL(process.env.NEXT_PUBLIC_BACKEND_URL as string),

    title: {
      default: t("title"),
      template: `%s | ${t("title")}`,
    },

    description: t("description"),

    // Etiquetas Open Graph para redes sociales como Facebook, Discord o LinkedIn
    openGraph: {
      title: t("title"),
      description: t("description"),
      url: process.env.NEXT_PUBLIC_BACKEND_URL+`/${locale}`,
      siteName: t("siteName"),
      locale: locale === "es" ? "es_ES" : locale === "de" ? "de_DE" : "en_US",
      type: "website",
      images: [
        {
          url: "/og-image.png",
          width: 1200,
          height: 630,
        },
      ],
    },

    twitter: {
      card: "summary_large_image",
      title: t("title"),
      description: t("description"),
      images: ["/og-image.png"],
    },

    alternates: {
      canonical: process.env.NEXT_PUBLIC_BACKEND_URL+`/${locale}`,
      languages: {
        en: process.env.NEXT_PUBLIC_BACKEND_URL+`/en`,
        es: process.env.NEXT_PUBLIC_BACKEND_URL+`/es`,
        de: process.env.NEXT_PUBLIC_BACKEND_URL+`/de`,
      },
    },
  };
}


// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {

  // Ensure that the incoming `locale` is valid
  const { locale } = await params;
  if (!routing.locales.includes(locale as "en" | "de" | "es")) {
    notFound();
  }

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages();

  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={`${inter.variable} font-sans antialiased`}>

        <NextIntlClientProvider messages={messages}>
          <Providers>
          <Navbar />
            <Toaster position="bottom-right" reverseOrder={false} gutter={8} toastOptions={{ duration: 3000, style: { background: "var(--toast-bg)", color: "var(--toast-color)", }, }} />
            <ParticlesBackground />
            <div>{children}</div>
            <ScrollToTopButton />
            <Footer />
          </Providers>
        </NextIntlClientProvider>

      </body>
    </html>
  );
}
